using BSP.MathUtils.Interpolation.Functions;

namespace BSP.Tests.Geometries
{
    internal class LinearInterpolator
    {
        struct Dataset
        {
            public double[] X;
            public double[] Y;
        }

        
        List<Dataset> _datasets = new();


        [SetUp]
        public void Setup()
        {
            _datasets =
            [
                //Mass attenuation Fe
                new Dataset()
                {
                    X = [ 0.001, 0.0015, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007112, 0.007112, 0.008, 0.01, 0.015, 0.02, 0.03, 0.04, 0.05, 0.06, 0.08, 0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 1, 1.022, 1.25, 1.5, 2, 2.044, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 26, 28, 30, 40, 50, 60, 80, 100, 150, 200, 300, 400, 500, 600, 800, 1000, 1500, 2000, 3000, 4000, 5000, 6000, 8000, 10000, 15000, 20000, 30000, 40000, 50000, 60000, 80000 ],
                    Y = [ 9081, 3396, 1623, 554.3, 253.9, 137.4, 82.78, 51.45, 406, 304.1, 169.5, 56.34, 25.17, 7.892, 3.45, 1.833, 1.113, 0.5392, 0.3341, 0.1786, 0.1357, 0.1051, 0.09131, 0.08241, 0.07583, 0.06631, 0.05951, 0.05887, 0.05322, 0.04864, 0.04254, 0.04213, 0.03616, 0.03309, 0.03144, 0.03056, 0.0301, 0.02991, 0.02986, 0.02994, 0.03007, 0.03024, 0.03044, 0.03068, 0.03092, 0.03118, 0.0317, 0.03223, 0.03277, 0.03327, 0.03377, 0.03423, 0.03469, 0.03666, 0.03828, 0.03961, 0.04172, 0.04329, 0.04592, 0.04756, 0.04952, 0.05069, 0.05146, 0.05202, 0.05278, 0.05327, 0.05399, 0.05438, 0.05482, 0.05505, 0.05521, 0.0553, 0.05544, 0.05552, 0.05565, 0.05572, 0.05578, 0.05581, 0.05585, 0.05586, 0.05588 ],
                },

                //Mass attenuation Al
                new Dataset(){
                    X = [0.001,0.0015,0.00156,0.00156,0.002,0.003,0.004,0.005,0.006,0.008,0.01,0.015,0.02,0.03,0.04,0.05,0.06,0.08,0.1,0.15,0.2,0.3,0.4,0.5,0.6,0.8,1,1.022,1.25,1.5,2,2.044,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,30,40,50,60,80,100,150,200,300,400,500,600,800,1000,1500,2000,3000,4000,5000,6000,8000,10000,15000,20000,30000,40000,50000,60000,80000],
                    Y = [ 1183,400.2,360,3955,2261,786.6,359.2,192.3,114.3,49.6,25.66,7.641,3.237,1.019,0.4998,0.3214,0.244,0.1817,0.1572,0.1317,0.1188,0.1026,0.09187,0.08388,0.07762,0.06818,0.06132,0.06067,0.05486,0.05,0.0432,0.04274,0.03539,0.03105,0.02836,0.02655,0.02528,0.02437,0.02369,0.02318,0.02279,0.02249,0.02225,0.02208,0.02195,0.02184,0.02173,0.02168,0.02168,0.02172,0.02179,0.02187,0.02196,0.02251,0.02306,0.02358,0.02447,0.02517,0.02641,0.02724,0.02825,0.02888,0.02931,0.02961,0.03004,0.03032,0.03074,0.03098,0.03123,0.03139,0.03148,0.03154,0.03161,0.03168,0.03175,0.03179,0.03182,0.03184,0.03186,0.03186,0.03189],
                }
            ];
        }

        [Test]
        public void StandardIntegrator()
        {
            LSpline interpolator = new LSpline();
            var interpolatedData = interpolator.Interpolate(null, null, null);
            Assert.That(interpolatedData, Is.EqualTo(null).Within(1e-6));//Mathcad
        }

       
    }
}
