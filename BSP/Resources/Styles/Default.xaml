<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--#region Text Box Styles -->
    <Style TargetType="TextBox" x:Key="textboxWithError">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="BorderBrush" Value="Red"/>
                <Setter Property="BorderThickness" Value="2"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="GeneralErrorStyle" TargetType="TextBox">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Border BorderBrush="Red" BorderThickness="2">
                            <AdornedElementPlaceholder x:Name="placeholder"/>
                        </Border>
                        <TextBlock FontSize="12" FontWeight="Bold" 
                                   Text="!" Foreground="Red"
                                   ToolTip="{Binding ElementName=placeholder, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                                   Margin="2,0,0,0"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox" x:Key="DefaultTextBox" BasedOn="{StaticResource textboxWithError}">
        <Setter Property="Height" Value="23"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <!--#endregion-->

    <!--#region Button Styles -->
    <Style TargetType="Button" x:Key="DefaultButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Name="btnGrid">
                        <Border Name="btnBorder" CornerRadius="3" Background="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderThickness="0.5">
                            <ContentPresenter TextElement.Foreground="Black" TextElement.FontSize="12" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.ControlDarkDarkColorKey}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="btnBorder">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource {x:Static SystemColors.GradientInactiveCaptionColorKey}}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="btnGrid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MinHeight" Value="25"/>
    </Style>
    <!--#endregion-->
    

    <!--#region DataGrid Cell Templates -->
    <DataTemplate x:Key="DataGridDimensionColumn">
        <Grid>
            <TextBlock Text="{Binding Value}" IsEnabled="{Binding IsValueAvailable}" TextAlignment="Left"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="DataGridDimensionEditTemplate">
        <Grid>
            <TextBox Text="{Binding Value}" IsEnabled="{Binding IsValueAvailable}" TextAlignment="Left" />
        </Grid>
    </DataTemplate>
    <!--#endregion-->

    <Style TargetType="DataGridColumnHeader" x:Key="DefaultDataGridColumn">
        <!--<Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFFBFDFF" />
                    <GradientStop Color="#FFEDEDEF" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
        <!--<Setter Property="BorderThickness" Value="0.5 1 0.5 1"/>
        <Setter Property="BorderBrush" Value="LightGray"/>-->
        <Setter Property="Padding" Value="3,3,3,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <TextBlock Text="{Binding}" TextWrapping="Wrap" TextAlignment="Center"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#region DataGrid Cell ComboBox Enter to Preview Mode-->
    <Style TargetType="DataGridCell" x:Key="ComboboxEditing">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsEditing" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->


    <!--#region DataGrid Row Highlight by green -->
    <Style x:Key="GreenDataGridRow" TargetType="DataGridRow">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMajorLine}" Value="True">
                <Setter Property="Background" Value="Lime"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <Style TargetType="DataGrid" x:Key="DefaultDataGrid">
        <Setter Property="VerticalGridLinesBrush" Value="LightGray"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="LightGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ColumnHeaderStyle" Value="{StaticResource DefaultDataGridColumn}"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
    </Style>

    <Style TargetType="ComboBox" x:Key="DefaultCombobox">
        <Setter Property="Height" Value="23"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="ToolBarTray" x:Key="MainToolbarTray">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource {x:Static SystemColors.ControlColorKey}}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToolBar" x:Key="MainToolbar">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource {x:Static SystemColors.ControlColorKey}}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GroupBox" x:Key="DefaultGroupBox">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource {x:Static SystemColors.ScrollBarColorKey}}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

</ResourceDictionary>