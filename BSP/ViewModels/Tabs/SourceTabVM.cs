using BSP.BL;
using BSP.BL.DTO;
using BSP.BL.Services;
using BSP.Common;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Xml.Linq;

namespace BSP.ViewModels.Tabs
{
    public class SourceTabVM : BaseViewModel, IDataErrorInfo
    {
        #region Constructor
        public SourceTabVM(RadionuclidesService radionuclidesService, AvailableDataController dataController)
        {
            this.radionuclidesService = radionuclidesService;
            this.dataController = dataController;

            AvailableSourceForms = new(SourceFormVM.Load());

            SourceDimensions = new();
            SelectedRadionuclides = new();
            EnergyYieldList = new();

            SelectedSourceForm = AvailableSourceForms.FirstOrDefault();
            SelectedSourceMaterial = AvailableDataController.AvailableMaterials.FirstOrDefault();
        }
        #endregion

        #region Fields
        private readonly RadionuclidesService radionuclidesService;
        private readonly AvailableDataController dataController;

        private float sourceMaterialDensity = 2.4f;
        private float sourceMaterialZ = 1;

        private double sourceMaxYield = 0.0;
        private double sourceTotalActivity = 0.0;

        private float cutoffBremsstrahlungEnergy = 0.015F;
        private bool isAutoGeneratedModeChecked = true;

        private SourceFormVM _selectedSourceForm;
        private RadionuclideVM _selectedRadionuclide;
        private MaterialDto _selectedSourceMaterial;

        private bool HasAvailableNuclides => AvailableDataController.AvailableNuclides.Count > 0;
        #endregion

        #region Properties
        public SourceFormVM SelectedSourceForm { get => _selectedSourceForm; set { _selectedSourceForm = value; OnChanged(); OnSourceFormTypeChanged(); } }
        public RadionuclideVM SelectedRadionuclide { get => _selectedRadionuclide; set { _selectedRadionuclide = value; OnChanged(); } }
        public MaterialDto SelectedSourceMaterial { get => _selectedSourceMaterial; set 
            { 
                _selectedSourceMaterial = value; OnChanged(); 
                SourceZ = _selectedSourceMaterial?.Z ?? 1; SourceDensity = _selectedSourceMaterial?.Density ?? 1;
                if (IsAutoGeneratedModeChecked) ClearYieldsData();
            } 
        }

        public ObservableCollection<DimensionVM> SourceDimensions { get; }
        public ObservableCollection<RadionuclideVM> SelectedRadionuclides { get; }
        /// <summary>
        /// Коллекция для таблицы с энергиями и выходами тормозного излучения
        /// </summary>
        public ObservableCollection<BremsstrahlungEnergyYieldVM> EnergyYieldList { get; }


        public List<SourceFormVM> AvailableSourceForms { get; }

        public float SourceZ { get => sourceMaterialZ; set { sourceMaterialZ = value; OnChanged(); } }
        public float SourceDensity { get => sourceMaterialDensity; set { sourceMaterialDensity = value; OnChanged(); } }
        public double SourceTotalActivity { get => sourceTotalActivity; set { sourceTotalActivity = value; OnChanged(); } }
        public double SourceMaxYield { get => sourceMaxYield; set { sourceMaxYield = value; OnChanged(); } }

        public float CutoffBremsstrahlungEnergy { get => cutoffBremsstrahlungEnergy; set { cutoffBremsstrahlungEnergy = value > 0.015F ? value : 0.015F; OnChanged(); } }

        public bool IsAutoGeneratedModeChecked { get => isAutoGeneratedModeChecked; set { isAutoGeneratedModeChecked = value; OnChanged(); EnergyYieldCreationModeChanged(); } }
        #endregion

        #region Commands
        RelayCommand addNuclideCommand;
        RelayCommand removeNuclideCommand;

        RelayCommand updateYieldsCommand;

        public event EventHandler<DataErrorsChangedEventArgs>? ErrorsChanged;

        public RelayCommand AddNuclideCommand => addNuclideCommand ?? (addNuclideCommand = new RelayCommand(obj => AddRadionuclide(), o => HasAvailableNuclides));
        public RelayCommand RemoveNuclideCommand => removeNuclideCommand ?? (removeNuclideCommand = new RelayCommand(obj => RemoveRadionuclide(), o => HasAvailableNuclides && _selectedRadionuclide != null));

        public RelayCommand UpdateYieldsCommand => updateYieldsCommand ?? (updateYieldsCommand = new RelayCommand(obj => UpdateYields(), o => SelectedRadionuclides.Count > 0));
        #endregion

        #region FillBremsstrahlungEnergyYieldData
        /// <summary>
        /// Отображает данные по энергиям и выходам энергии тормозного излучения
        /// </summary>
        public void FillBremsstrahlungEnergyYieldData()
        {
            if (SelectedRadionuclides.Count == 0)
                return;

            var majorRadionuclide = radionuclidesService.GetRadionuclideWithMaxEnergyIntensity(SelectedRadionuclides.Select(r => r.Id).ToArray());
            (_, var averageEnergies, var yields) = radionuclidesService.GetEnergyIntensityDataArrays(majorRadionuclide.Id);

            (var bremsstrahlungEnergies, var bremsstrahlungEnergyYields) = Bremsstrahlung.GetEnergyYieldData(averageEnergies, yields, SourceZ);
            var energyYieldsData = Enumerable
                .Range(0, bremsstrahlungEnergies.Length)
                .Select(i => new BremsstrahlungEnergyYieldVM()
                {
                    Energy = bremsstrahlungEnergies[i],
                    EnergyYield = bremsstrahlungEnergyYields[i]
                })
                .ToList();

            EnergyYieldList.Clear();
            foreach (var energyYield in energyYieldsData)
                EnergyYieldList.Add(energyYield);

            SourceMaxYield = bremsstrahlungEnergyYields.Sum();
        }
        #endregion

        public void OnSourceFormTypeChanged()
        {
            var dimensionsInfo = GeometryService.GetDimensionsInfo(_selectedSourceForm.FormType);
            SourceDimensions.Clear();
            foreach (var dimension in dimensionsInfo)
            {
                var dimensionVM = new DimensionVM()
                {
                    Name = dimension.Name,
                    Value = dimension.DefaultValue,
                };
                SourceDimensions.Add(dimensionVM);
            }
        }

        public void ClearYieldsData()
        {
            EnergyYieldList.Clear();
        }

        private void EnergyYieldCreationModeChanged()
        {
            if (isAutoGeneratedModeChecked)
            {
                OnRadionuclidesListUpdated();
            }
            else
            {
                ClearYieldsData();
                var standardEnergyIndices = Bremsstrahlung.GetEnergyBinsAverageEnergies(10);
                for (var i = 0; i < standardEnergyIndices.Length; i++)
                {
                    EnergyYieldList.Add(new BremsstrahlungEnergyYieldVM()
                    {
                        Energy = standardEnergyIndices[i],
                        EnergyYield = 0
                    });
                }
            }
        }

        public void OnRadionuclidesListUpdated()
        {
            ClearYieldsData();
            FillBremsstrahlungEnergyYieldData();
            SourceTotalActivity = SelectedRadionuclides.Sum(r => r.Activity);
        }

        public void AddRadionuclide()
        {
            SelectedRadionuclides.Add(new RadionuclideVM()
            {
                Id = AvailableDataController.AvailableNuclides.First().Id,
                Name = AvailableDataController.AvailableNuclides.First().Name,
                Activity = 100
            });
            ClearYieldsData();
        }

        public void RemoveRadionuclide()
        {
            SelectedRadionuclides.Remove(_selectedRadionuclide);
            OnRadionuclidesListUpdated();
        }

        public void UpdateYields()
        {
            OnRadionuclidesListUpdated();
        }


        public string Error => string.Empty;

        public string this[string columnName]
        {
            get
            {
                string error = string.Empty;
                switch (columnName)
                {
                    case nameof(SourceTotalActivity):
                        if (SourceTotalActivity < 0)
                            error = string.Format((Application.Current.TryFindResource("msg_ValidationTotalActivity") as string) ?? "Incorrect total activity value");
                        break;
                   
                }

                return error;
            }
        }
    }
}
