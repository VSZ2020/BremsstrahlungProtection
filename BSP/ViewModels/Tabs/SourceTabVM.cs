using BSP.BL;
using BSP.BL.DTO;
using BSP.BL.Services;
using BSP.Common;
using BSP.FileUtils;
using Microsoft.Win32;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Windows;

namespace BSP.ViewModels.Tabs
{
    public class SourceTabVM : BaseViewModel, IDataErrorInfo
    {
        private const char _CSV_DELIMETER = ',';

        #region Constructor
        public SourceTabVM(RadionuclidesService radionuclidesService, AvailableDataController dataController)
        {
            this.radionuclidesService = radionuclidesService;
            this.dataController = dataController;

            AvailableSourceForms = new(SourceFormVM.Load());

            SourceDimensions = new();
            SelectedRadionuclides = new();
            DosePoints = new();   //По-умолчанию всегда должна быть хотя бы одна точка
            EnergyYieldList = new();

            SelectedSourceForm = AvailableSourceForms.FirstOrDefault();
            SelectedSourceMaterial = AvailableDataController.AvailableMaterials.FirstOrDefault();
            AddDosePoint();
        }
        #endregion

        #region Fields
        private readonly RadionuclidesService radionuclidesService;
        private readonly AvailableDataController dataController;

        private float sourceMaterialDensity = 2.4f;
        private float sourceMaterialZ = 1;

        private double sourceMaxYield = 0.0;
        private double sourceTotalActivity = 0.0;

        private float cutoffBremsstrahlungEnergy = 0.015F;
        private bool isUseCutoff = true;
        
        private bool isAutoGeneratedModeChecked = true;

        private SourceFormVM _selectedSourceForm;
        private RadionuclideVM _selectedRadionuclide;
        private MaterialDto _selectedSourceMaterial;
        private DosePointVM? _selectedDosePoint;

        private bool HasAvailableNuclides => AvailableDataController.AvailableNuclides.Count > 0;
        #endregion

        #region Properties
        public SourceFormVM SelectedSourceForm { get => _selectedSourceForm; set { _selectedSourceForm = value; OnChanged(); OnSourceFormTypeChanged(); } }
        public RadionuclideVM SelectedRadionuclide { get => _selectedRadionuclide; set { _selectedRadionuclide = value; OnChanged(); } }
        public MaterialDto SelectedSourceMaterial { get => _selectedSourceMaterial; set 
            { 
                _selectedSourceMaterial = value; OnChanged(); 
                SourceZ = _selectedSourceMaterial?.Z ?? 1; SourceDensity = _selectedSourceMaterial?.Density ?? 1;
                if (IsAutoGeneratedModeChecked) OnRadionuclidesListUpdated();
            } 
        }

        public ObservableCollection<DimensionVM> SourceDimensions { get; }
        public ObservableCollection<RadionuclideVM> SelectedRadionuclides { get; }

        public ObservableCollection<DosePointVM> DosePoints { get; }
        public DosePointVM? SelectedDosePoint { get => _selectedDosePoint; set { _selectedDosePoint = value; OnChanged(); } }

        /// <summary>
        /// Коллекция для таблицы с энергиями и выходами тормозного излучения
        /// </summary>
        public ObservableCollection<BremsstrahlungEnergyYieldVM> EnergyYieldList { get; }


        public List<SourceFormVM> AvailableSourceForms { get; }

        public float SourceZ { get => sourceMaterialZ; set { sourceMaterialZ = value; OnChanged(); } }
        public float SourceDensity { get => sourceMaterialDensity; set { sourceMaterialDensity = value; OnChanged(); } }
        public double SourceTotalActivity { get => sourceTotalActivity; set { sourceTotalActivity = value; OnChanged(); /*OnTotalActivityChanged();*/ } }
        public double SourceMaxYield { get => sourceMaxYield; set { sourceMaxYield = value; OnChanged(); } }

        public float CutoffBremsstrahlungEnergy { get => cutoffBremsstrahlungEnergy; set { cutoffBremsstrahlungEnergy = value > 0.015F ? value : 0.015F; OnChanged(); } }

        public bool IsUseCutoffEnergy { get => isUseCutoff; set { isUseCutoff = value; OnChanged(); } }
        
        public bool IsAutoGeneratedModeChecked { get => isAutoGeneratedModeChecked; set { isAutoGeneratedModeChecked = value; OnChanged(); EnergyYieldCreationModeChanged(); } }
        #endregion

        #region Commands
        RelayCommand addNuclideCommand;
        RelayCommand removeNuclideCommand;

        RelayCommand updateYieldsCommand;

        RelayCommand addDosePointCommand;
        RelayCommand removeDosePointCommand;

        RelayCommand importEnergyIntensityDataCommand;
        RelayCommand exportEnergyIntensityDataCommand;

        public event EventHandler<DataErrorsChangedEventArgs>? ErrorsChanged;

        public RelayCommand AddNuclideCommand => addNuclideCommand ?? (addNuclideCommand = new RelayCommand(obj => AddRadionuclide(), o => HasAvailableNuclides && IsAutoGeneratedModeChecked));
        public RelayCommand RemoveNuclideCommand => removeNuclideCommand ?? (removeNuclideCommand = new RelayCommand(obj => RemoveRadionuclide(), o => HasAvailableNuclides && _selectedRadionuclide != null && IsAutoGeneratedModeChecked));

        public RelayCommand UpdateYieldsCommand => updateYieldsCommand ?? (updateYieldsCommand = new RelayCommand(obj => OnRadionuclidesListUpdated(), o => SelectedRadionuclides.Count > 0));

        public RelayCommand AddDosePointCommand => addDosePointCommand ?? (addDosePointCommand = new RelayCommand(obj => AddDosePoint()));
        public RelayCommand RemoveDosePointCommand => removeDosePointCommand ?? (removeDosePointCommand = new RelayCommand(obj => RemoveDosePoint(), obj => DosePoints.Count > 1));

        public RelayCommand ImportEnergyIntensityDataCommand => importEnergyIntensityDataCommand ?? (importEnergyIntensityDataCommand = new RelayCommand(o => ImportEnergyIntensityData()));
        public RelayCommand ExportEnergyIntensityDataCommand => exportEnergyIntensityDataCommand ?? (exportEnergyIntensityDataCommand = new RelayCommand(o => ExportEnergyIntensityData(), o => EnergyYieldList.Count > 0));
        #endregion

        #region FillBremsstrahlungEnergyYieldData
        /// <summary>
        /// Отображает данные по энергиям и выходам энергии тормозного излучения
        /// </summary>
        public void FillBremsstrahlungEnergyYieldData()
        {
            if (SelectedRadionuclides.Count == 0)
                return;

            var majorBetaRadionuclide = radionuclidesService.GetRadionuclideWithMaxEnergyIntensity(SelectedRadionuclides.Select(r => r.Id).ToArray());
            (var endpointBetaEnergies, var averageBetaEnergies, var betaYields) = radionuclidesService.GetEnergyIntensityDataArrays(majorBetaRadionuclide.Id);

            (var bremsstrahlungEnergies, var bremsstrahlungEnergyYields) = Bremsstrahlung.GetEnergyYieldData(
                nuclideEndpointEnergies: endpointBetaEnergies, 
                nuclideAverageEnergies: averageBetaEnergies,
                nuclideYields: betaYields, 
                Zeff: SourceZ, 
                useAverageBinEnergy: true);
            var fluxesOfEnergies = Bremsstrahlung.GetBremsstrahlungFluxOfEnergy(bremsstrahlungEnergyYields, SourceTotalActivity);

            var energyYieldsData = Enumerable
                .Range(0, bremsstrahlungEnergies.Length)
                .Select(i => new BremsstrahlungEnergyYieldVM(this)
                {
                    Energy = bremsstrahlungEnergies[i],
                    EnergyYield = bremsstrahlungEnergyYields[i],
                    EnergyFlux = fluxesOfEnergies[i],
                    PhotonsFlux = fluxesOfEnergies[i] / bremsstrahlungEnergies[i],
                })
                .ToList();

            //Заполняем список значениями для тормозного излучения
            ClearYieldsData();
            foreach (var energyYield in energyYieldsData)
                EnergyYieldList.Add(energyYield);

            //Рассчитываем и отображаем суммарный выход бета-излучения на распад по всем энергетическим группам
            UpdateTotalYield();
        }
        #endregion

        #region OnSourceFormTypeChanged
        /// <summary>
        /// Действие при смене геометрии источника. Отвечает за здание полей ввода размеров источника излучения
        /// </summary>
        public void OnSourceFormTypeChanged()
        {
            var dimensionsInfo = GeometryService.GetDimensionsInfo(_selectedSourceForm.FormType);
            SourceDimensions.Clear();
            foreach (var dimension in dimensionsInfo)
            {
                var dimensionVM = new DimensionVM()
                {
                    Name = dimension.Name,
                    Value = dimension.DefaultValue,
                    Discreteness = dimension.Discreteness,
                    IsValueAvailable = dimension.IsValueEnabled,
                };
                SourceDimensions.Add(dimensionVM);
            }
        }
        #endregion

        #region ClearYieldsData
        public void ClearYieldsData()
        {
            EnergyYieldList.Clear();
        } 
        #endregion

        #region EnergyYieldCreationModeChanged
        private void EnergyYieldCreationModeChanged()
        {
            if (isAutoGeneratedModeChecked)
            {
                OnRadionuclidesListUpdated();
            }
            else
            {
                ClearYieldsData();
                var standardEnergyIndices = Bremsstrahlung.GetEnergyBinsAverageEnergies(10);
                for (var i = 0; i < standardEnergyIndices.Length; i++)
                {
                    EnergyYieldList.Add(new BremsstrahlungEnergyYieldVM(this)
                    {
                        Energy = standardEnergyIndices[i],
                        EnergyYield = 0,
                        //EnergyFlux = 0,
                        //PhotonsFlux = 0
                    });
                }
            }
        }
        #endregion

        #region GetBremsstrahlungSpectrum
        /// <summary>
        /// Возвращает сведения о потоках квантов тормозного излучения 
        /// </summary>
        /// <returns>Кортеж: (массив средних энергий групп, потоки квантов тормозного излучения по группам)</returns>
        public (double[] bsEnergies, double[] bsFluxes) GetBremsstrahlungSpectrum()
        {
            //Bremsstrahlung
            //Выбираем только пары значений энергии и выхода ТИ, в которых значения отличны от нуля. Сортируем по возрастанию энергии.
            var energyYieldData = EnergyYieldList
                .OrderBy(ei => ei.Energy)
                .Where(ei => ei.Energy > 0 && ei.PhotonsFlux > 0)
                .ToList();

            //Если задан учет энергии отсечки, то фильтруем данные
            if (this.isUseCutoff)
            {
                energyYieldData = energyYieldData
                    .Where(ei => ei.Energy >= CutoffBremsstrahlungEnergy)
                    .ToList();
            }

            var energies = energyYieldData
                .Select(e => (double)e.Energy)
                .ToArray();

            var bremsstrahlungPhotonsFluxes = energyYieldData.Select(e => e.PhotonsFlux).ToArray();

            return (energies, bremsstrahlungPhotonsFluxes);
        }
        #endregion

        #region OnRadionuclidesListUpdated
        public void OnRadionuclidesListUpdated()
        {
            ClearYieldsData();
            UpdateTotalActivity();
            FillBremsstrahlungEnergyYieldData();
        }
        #endregion

        #region UpdateTotalActivity
        public void UpdateTotalActivity()
        {
            SourceTotalActivity = SelectedRadionuclides.Sum(r => r.Activity);
        }
        #endregion

        #region UpdateTotalYield
        public void UpdateTotalYield()
        {
            SourceMaxYield = EnergyYieldList.Select(e => e.EnergyYield).Sum();
        } 
        #endregion

        #region Radionuclides control
        public void AddRadionuclide()
        {
            SelectedRadionuclides.Add(new RadionuclideVM(this)
            {
                Id = AvailableDataController.AvailableNuclides.First().Id,
                Name = AvailableDataController.AvailableNuclides.First().Name,
                Activity = 100
            });
            OnRadionuclidesListUpdated();
        }

        public void RemoveRadionuclide()
        {
            SelectedRadionuclides.Remove(_selectedRadionuclide);
            OnRadionuclidesListUpdated();
        } 
        #endregion

        #region Dose point control
        public void AddDosePoint()
        {
            DosePoints.Add(new DosePointVM() { X = 100, Y = 0, Z = 0 });
        }

        public void RemoveDosePoint()
        {
            DosePoints.Remove(_selectedDosePoint);
        }
        #endregion

        #region ImportEnergyIntensityData
        private void ImportEnergyIntensityData()
        {
            OpenFileDialog openDialog = new();
            openDialog.Filter = "Text file (*.txt)|*.txt|Comma-separated values file (*.csv)|*.csv";
            openDialog.FilterIndex = 0;

            var result = openDialog.ShowDialog();
            if (result.HasValue && result.Value)
            {
                (var totalActivity, var items) = FileService.ReadEnergyIntensityFile(openDialog.FileName, this);
                if (items.Count() > 0)
                {
                    IsAutoGeneratedModeChecked = false;
                    ClearYieldsData();
                    foreach (var energyYield in items)
                        EnergyYieldList.Add(energyYield);
                    SourceTotalActivity = totalActivity;
                    UpdateTotalYield();
                }
            }
        }
        #endregion

        #region ExportEnergyIntensityData
        private void ExportEnergyIntensityData()
        {
            if (SourceTotalActivity <= 0)
            {
                MessageBox.Show("Total activity of source is zero or negative!","Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }    

            SaveFileDialog saveDialog = new();
            saveDialog.Filter = "Text file (*.txt)|*.txt|Comma-separated values file (*.csv)|*.csv";
            saveDialog.DefaultExt = ".txt";
            saveDialog.AddExtension = true;
            saveDialog.FilterIndex = 0;

            var result = saveDialog.ShowDialog();
            if (result.HasValue && result.Value)
            {
                var filename = saveDialog.FileName;
                FileService.ExportEnergyIntensityToTextFile(filename, EnergyYieldList.ToList(), SourceTotalActivity);
            }
        }
        #endregion

        #region ValidateModel
        public bool ValidateModel(BaseValidationViewModel validationContext)
        {
            if (DosePoints.Count == 0)
                validationContext.AddError("At least one dose point must to be");

            if (DosePoints.Any(p => p.X < 0 || p.Y < 0 || p.Z < 0))
                validationContext.AddError("Dose point coordinates are positive values");


            if (SourceDimensions.Count > 0)
            {
                if (DosePoints.Any(p => p.X <= SourceDimensions.First().Value))
                    validationContext.AddError("Dose point on the edge or inside source volume");

                if (SourceDimensions.Count > 1 && DosePoints.Any(p => p.X <= 0) && DosePoints.Any(p => p.Y <= SourceDimensions[1].Value))
                    validationContext.AddError("Y coordinate of dose point on the edge or inside source volume");

                if (SourceDimensions.Count > 2 && DosePoints.Any(p => p.X <= 0) && DosePoints.Any(p => p.Z <= SourceDimensions[2].Value))
                    validationContext.AddError("Z coordinate of dose point on the edge or inside source volume");
            }


            return validationContext.IsValid;
        } 
        #endregion

        #region IDataError 
        public string Error => string.Empty;

        public string this[string columnName]
        {
            get
            {
                string error = string.Empty;
                switch (columnName)
                {
                    case nameof(SourceTotalActivity):
                        if (SourceTotalActivity < 0)
                            error = string.Format((Application.Current.TryFindResource("msg_ValidationTotalActivity") as string) ?? "Incorrect total activity value");
                        break;

                }

                return error;
            }
        } 
        #endregion
    }
}
